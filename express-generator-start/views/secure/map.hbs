<span id="userHomeLng" hidden>{{this.homeCoords.lng}}</span>
<span id="userHomeLat" hidden>{{this.homeCoords.lat}}</span>
<span id="userComments" hidden>{{this.userComments}}</span>
<span id="currentLocation" hidden>{{this.currentLocation}}</span>
<div id="map"></div>
<pre id='info' hidden></pre>

<form class="add-comment-form" action='/comment' method='POST'>

  <input type='text' name='title' placeholder="title" required>

  <input type='text' name='text' placeholder="text">

  <input id="newCommentLng" type='text' name='lng' required>

  <input id="newCommentLat" type='text' name='lat' required>


  <button id="add-comment-btn" type='submit'>Submit</button>
  <input id="privatePublicInput" type="text" name="privateOrPublic" value="Public" hidden>
  <button id="privatePublicBtn">Public</button>
</form>

<script src='https://unpkg.com/mapbox@1.0.0-beta9/dist/mapbox-sdk.min.js'></script>
<script>

    const centerLong = document.querySelector("#userHomeLng").innerHTML
    const centerLat = document.querySelector("#userHomeLat").innerHTML
    const addCommentBtn = document.querySelector("#add-comment-btn");
    const client = new MapboxClient('pk.eyJ1IjoiaXZhbmZyYWwiLCJhIjoiY2szOTFzMm9pMGJteTNtcDI3aDJua2s5MSJ9.y5iUZoRKCEeCny5m2sJrlg');
    const map = document.querySelector("#map")
    const currentLocation = document.querySelector("#currentLocation").innerHTML
    const query=""
    const lastMarker = []
    var isAddCommentDisplayed = false;


    //Set popup for Home Icon
    const popup = new mapboxgl.Popup()
    .setHTML(`<h3>Home</h3>`);

    const privatePublicBtn = document.querySelector("#privatePublicBtn")
    const privatePublicInput = document.querySelector("#privatePublicInput")
    privatePublicBtn.addEventListener("click", (e)=>{
        e.preventDefault()
        if(privatePublicBtn.innerHTML == "Public"){
            privatePublicBtn.innerHTML = "Private"
            privatePublicInput.value = "Private"
        } else {
            privatePublicBtn.innerHTML = "Public"
            privatePublicInput.value = "Public"
        }
    })



    //Draw map
    client.geocodeForward(query, function(err, data, res) {
    mapboxgl.accessToken = "pk.eyJ1IjoiaXZhbmZyYWwiLCJhIjoiY2szOTFzMm9pMGJteTNtcDI3aDJua2s5MSJ9.y5iUZoRKCEeCny5m2sJrlg" //!!! .env

        //Map setup
        const map = new mapboxgl.Map({
            container: 'map', // HTML container id
            style: 'mapbox://styles/mapbox/streets-v9', // style URL
            center: [JSON.parse(currentLocation).lng.$numberDecimal, JSON.parse(currentLocation).lat.$numberDecimal],
            zoom: 13
        });

        //Add home marker
        /*const marker = new mapboxgl.Marker()
        .setLngLat([userHomeLong, userHomeLat])
        .setPopup(popup)
        .addTo(map);*/


        //Show current map center location
        var showLocation = setInterval(()=>{
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", `https://api.mapbox.com/geocoding/v5/mapbox.places/${map.getCenter().lng},${map.getCenter().lat}.json?proximity=-122.3995752,37.7881856&access_token=${mapboxgl.accessToken}`, false ); // false for synchronous request
            xmlHttp.send( null );
            const response = xmlHttp.responseText;
            const placeDisplay = document.querySelector(".currentMapCenter")
            const city = JSON.parse(response).features[0].place_name.split(", ")[1].split(" ")
            city.shift()
            placeDisplay.innerHTML = city.join(" ");
        }, 500)


        //Add selected location marker, set input values to coords
        map.on('click', function (e) {
            const newCommentLng = e.lngLat.wrap().lng
            const newCommentLat = e.lngLat.wrap().lat

            const newCommentLngInput = document.querySelector("#newCommentLng");
            const newCommentLatInput = document.querySelector("#newCommentLat");
            newCommentLngInput.value = newCommentLng
            newCommentLatInput.value = newCommentLat

            const markerOnClick = new mapboxgl.Marker()
                .setLngLat([newCommentLng, newCommentLat])
                .addTo(map);
            if(lastMarker[0]){
                lastMarker[0].remove();
                lastMarker.splice(0,1)
            }
            lastMarker.push(markerOnClick)
        });        

        //TO DO: Add comment icon should slide form 
        const addCommentIcon = document.querySelector(".add-img-plus");
        addCommentIcon.addEventListener("click",()=>{
            if(isAddCommentDisplayed){
                const commentForm = document.querySelector(".add-comment-form");
                commentForm.style.height = "0vh";
                isAddCommentDisplayed = false;
            }
            else {
                const commentForm = document.querySelector(".add-comment-form");
                commentForm.style.height = "10vh";
                isAddCommentDisplayed = true;
            }
        })

        const userComments = JSON.parse(document.querySelector("#userComments").innerHTML)
        userComments.forEach(comment=>{

            //TO DO: Style comments accordingly
            if(comment.comment.type=="home"){
                const commentPopup =new mapboxgl.Popup()
                    .setHTML(`<h3>Home</h3>`);
                const previousCommentMarker = new mapboxgl.Marker()
                    .setLngLat([comment.comment.location.lng.$numberDecimal, comment.comment.location.lat.$numberDecimal])
                    .setPopup(commentPopup)
                    .addTo(map);
            } else {
                const commentPopup =new mapboxgl.Popup()
                    .setHTML(`<h3>${comment.comment.title}</h3><p>${comment.comment.text}</p><form action="/comment/${comment.comment._id}" method="GET"><button type="submit">See details</button></form>`);
                const previousCommentMarker = new mapboxgl.Marker()
                    .setLngLat([comment.comment.location.lng.$numberDecimal, comment.comment.location.lat.$numberDecimal])
                    .setPopup(commentPopup)
                    .addTo(map);
            }
        })
    });
</script>


{{!-- navigator.geolocation.getCurrentPosition((posObj) => console.log(posObj))  --}}

